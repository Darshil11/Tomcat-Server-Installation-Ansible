- name: Add EPEL repository
  yum:
    name: epel-release
    state: present

- name: Install basic packages
  package:
    name: ['vim','bash-completion','tmux','tree','htop','wget','unzip','curl','git']
    state: present

- name: Install Java 8 CentOS
  yum:
    name: java-1.8.0-openjdk
    state: present

- name: Add "{{ tomcat_instance1_name }}" group
  group:
    name: "{{ tomcat_instance1_name }}"

- name: Add "{{ tomcat_instance2_name }}" group
  group:
    name: "{{ tomcat_instance2_name }}"


- name: Add "{{ tomcat_instance1_name }}" user
  user:
    name: "{{ tomcat_instance1_name }}"
    group: "{{ tomcat_instance1_name }}"
    home: "{{ tomcat_instance1_install_path }}"/"{{ tomcat_instance1_name }}"
    createhome: no
    system: yes

- name: Add "{{ tomcat_instance2_name }}" user
  user:
    name: "{{ tomcat_instance2_name }}"
    group: "{{ tomcat_instance2_name }}"
    home: "{{ tomcat_instance2_install_path }}"/"{{ tomcat_instance2_name }}"
    createhome: no
    system: yes


- name: Download Tomcat
  get_url:
    url: "{{ tomcat_archive_url }}"
    dest: "{{ tomcat_archive_dest }}"

- name: Create a tomcat1 directory
  file:
    path: "{{ tomcat_instance1_install_path }}"/"{{ tomcat_instance1_name }}"
    state: directory
    owner: "{{ tomcat_instance1_name }}"
    group: "{{ tomcat_instance1_name }}"

- name: Create a "{{ tomcat_instance2_name }}" directory
  file:
    path: "{{ tomcat_instance2_install_path }}"/"{{ tomcat_instance2_name }}"
    state: directory
    owner: "{{ tomcat_instance2_name }}"
    group: "{{ tomcat_instance2_name }}"


- name: Extract "{{ tomcat_instance1_name }}" archive
  unarchive:
    src: "{{ tomcat_archive_dest }}"
    dest: "{{ tomcat_instance1_install_path }}"/"{{ tomcat_instance1_name }}"
    owner: "{{ tomcat_instance1_name }}"
    group: "{{ tomcat_instance1_name }}"
    remote_src: yes
    extra_opts: "--strip-components=1"
    creates: "{{ tomcat_instance1_install_path }}"/"{{ tomcat_instance1_name }}"/bin

- name: Extract "{{ tomcat_instance2_name }}" archive
  unarchive:
    src: "{{ tomcat_archive_dest }}"
    dest: "{{ tomcat_instance2_install_path }}"/"{{ tomcat_instance2_name }}"
    owner: "{{ tomcat_instance2_name }}"
    group: "{{ tomcat_instance2_name }}"
    remote_src: yes
    extra_opts: "--strip-components=1"
    creates: "{{ tomcat_instance2_install_path }}"/"{{ tomcat_instance2_name }}"/bin

- name: Copy "{{ tomcat_instance1_name }}" service file
  template:
    src: templates/tomcat.service.j2
    dest: /etc/systemd/system/tomcat1.service
  when: ansible_service_mgr == "systemd"

- name: Copy "{{ tomcat_instance2_name }}" service file
  template:
    src: templates/tomcat.service2.j2
    dest: /etc/systemd/system/tomcat2.service
  when: ansible_service_mgr == "systemd"

- name: Copy "{{ tomcat_instance1_name }}" server file
  template:
    src: templates/tomcat-server-9.0.xml.j2
    dest: "{{ tomcat_instance1_install_path }}"/"{{ tomcat_instance1_name }}"/conf/server.xml
  when: ansible_service_mgr == "systemd"

- name: Copy "{{ tomcat_instance2_name }}" service file
  template:
    src: templates/tomcat-server2-9.0.xml.j2
    dest: "{{ tomcat_instance2_install_path }}"/"{{ tomcat_instance2_name }}"/conf/server.xml
  when: ansible_service_mgr == "systemd"



- name: Start and enable "{{ tomcat_instance1_name }}"
  service:
    daemon_reload: yes
    name: "{{ tomcat_instance1_name }}"
    state: started
    enabled: yes
  when: ansible_service_mgr == "systemd"

- name: Start and enable "{{ tomcat_instance2_name }}"
  service:
    daemon_reload: yes
    name: "{{ tomcat_instance2_name }}"
    state: started
    enabled: yes
  when: ansible_service_mgr == "systemd"

#- name: Start and enable firewalld
  #service:
    #name: firewalld
    #state: started
    #enabled: yes
  #when: ansible_service_mgr == "systemd"

#- name: Open tomcat port on the firewall
  #firewalld:
    #port: 8080/tcp
    #permanent: true
    #state: enabled
    #immediate: yes
  #when: ansible_service_mgr == "systemd"

- name: Set UI access credentials
  template:
    src: tomcat-users.xml.j2
    dest: /usr/share/tomcat1/conf/tomcat-users.xml
  notify: restart tomcat1

- name: Set UI access credentials
  template:
    src: tomcat-users.xml.j2
    dest: /usr/share/tomcat2/conf/tomcat-users.xml
  notify: restart tomcat2


- name: Allow access to Manager and Host Manager apps from any IP
  template:
    src: context.xml.j2 
    dest: "{{ item }}"
  with_items:
    - /usr/share/tomcat1/webapps/host-manager/META-INF/context.xml
    - /usr/share/tomcat1/webapps/manager/META-INF/context.xml
  notify: restart tomcat1

- name: Allow access to Manager and Host Manager apps from any IP
  template:
    src: context.xml.j2
    dest: "{{ item }}"
  with_items:
    - /usr/share/tomcat2/webapps/host-manager/META-INF/context.xml
    - /usr/share/tomcat2/webapps/manager/META-INF/context.xml
  notify: restart tomcat2

